// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL") // conexão pooling(padrão) Salva suas requisições para melhor desempenho nas pesquisas futuras 
  directUrl = env("DIRECT_DATABASE_URL") // conexão direta (non-pooling), para que não seja salvo as requisições passadas
}


// Talvez exista um erro pelo falta do @map("_id") , não da pra ser usado com o @default(uuid())
// portanto se der erro assim, alternar para @map("_id") e remover o @default(uuid())

model User {
  id String @id @default(uuid()) @db.Uuid
  name String
  image String?
  email String? @unique
  emailVerified DateTime?
  hashedPassword String?
  CreateAt DateTime @default(now())
  updateAt DateTime @updatedAt
  favoriteIds String[] @db.Uuid
  accounts Account[]
  sessions Session[]
}

model Account {
  id String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  type String 
  provider String
  providerAccountId String
  refresh_token String? @db.VarChar
  access_token String? @db.VarChar
  expires_at Int?
  token_type String? @db.VarChar
  scope String? @db.VarChar
  id_token String? @db.VarChar
  session_state String? @db.VarChar

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(uuid()) @db.Uuid
  sessionToken String @unique
  userId String @db.Uuid
  expires DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id String @id @default(uuid()) @db.Uuid
  identifier String
  token String @unique
  expires DateTime

  @@unique([identifier, token])
}

model Movie {
  id String @id @default(uuid()) @db.Uuid
  title String
  description String
  videoUrl String
  thumbnailUrl String
  genre String
  duration String
}